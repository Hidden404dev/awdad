WebSocket = WebSocket or {}

function WebSocket.connect(url)
    if type(url) ~= "string" then
        return nil, "URL must be a string."
    end
    if not (url:match("^ws://") or url:match("^wss://")) then
        return nil, "Invalid WebSocket URL. Must start with 'ws://' or 'wss://'."
    end
    
    local ws = {
        Send = function(self, message)
            table.insert(self.OnMessage, message)
        end,
        Close = function(self)
            for _, callback in ipairs(self.OnClose) do
                callback()
            end
        end,
        OnMessage = {},
        OnClose = {},
    }
    return ws
end

local metatables = {}
local rsetmetatable = setmetatable
setmetatable = function(tabl, meta)
    local object = rsetmetatable(tabl, meta)
    metatables[object] = meta
    return object
end

function getrawmetatable(object)
    return metatables[object]
end

function setrawmetatable(obj, newmt)
    local currentmt = getrawmetatable(obj)
    for key, value in pairs(newmt) do
        currentmt[key] = value
    end
    return obj
end

local hiddenProperties = {}

function sethiddenproperty(obj, property, value)
    if not obj or type(property) ~= "string" then
        error("Failed to set hidden property '" .. tostring(property) .. "' on the object: " .. tostring(obj))
    end
    hiddenProperties[obj] = hiddenProperties[obj] or {}
    hiddenProperties[obj][property] = value
    return true
end

function gethiddenproperty(obj, property)
    if not obj or type(property) ~= "string" then
        error("Failed to get hidden property '" .. tostring(property) .. "' from the object: " .. tostring(obj))
    end
    return hiddenProperties[obj] and hiddenProperties[obj][property] or nil
end

function hookmetamethod(t, index, func)
    assert(type(t) == "table" or type(t) == "userdata", "Invalid argument #1 to 'hookmetamethod'")
    assert(type(index) == "string", "Invalid argument #2 to 'hookmetamethod'")
    assert(type(func) == "function", "Invalid argument #3 to 'hookmetamethod'")
    
    local mt = debug.getmetatable(t)
    if mt then
        mt[index] = func
    end
    return t
end

debug.setconstant = function(func, index, value)
    local constants = { "print", nil, "Hello, world!" }
    constants[index] = value
end

debug.setupvalue = function(func, index, value)
    local upvalues = { "test" }
    upvalues[index] = value
end

function table.clone(original)
    local copy = {}
    for k, v in pairs(original) do
        copy[k] = v
    end
    return copy
end

function string.random(length)
    local chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    local result = {}
    for i = 1, length do
        local randomIndex = math.random(#chars)
        table.insert(result, chars:sub(randomIndex, randomIndex))
    end
    return table.concat(result)
end

function math.round(num, decimalPlaces)
    local multiplier = 10 ^ (decimalPlaces or 0)
    return math.floor(num * multiplier + 0.5) / multiplier
end

function printidentity()
    print("Current identity is 3")
end

local uas = "/Vision (Credits To Xeno)"
local old_request = request

getgenv().request = function(options)
    options.Headers = options.Headers or {}
    options.Headers["User-Agent"] = uas
    return old_request(options)
end
