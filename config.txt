-- wsp
WebSocket = WebSocket or {}

function WebSocket.connect(url)
    if type(url) ~= "string" then
        return nil, "URL must be a string."
    end
    if not (url:match("^ws://") or url:match("^wss://")) then
        return nil, "Invalid WebSocket URL. Must start with 'ws://' or 'wss://'."
    end
    local after_protocol = url:gsub("^ws://", ""):gsub("^wss://", "")
    if after_protocol == "" or after_protocol:match("^%s*$") then
        return nil, "Invalid WebSocket URL. No host specified."
    end
    return {
        Send = function(_) end,
        Close = function() end,
        OnMessage = {},
        OnClose = {},
    }
end

local metatables = {}
local rsetmetatable = setmetatable

setmetatable = function(tabl, meta)
    local object = rsetmetatable(tabl, meta)
    metatables[object] = meta
    return object
end

function getrawmetatable(object)
    return metatables[object]
end

function setrawmetatable(obj, newmt)
    local currentmt = getrawmetatable(obj)
    for key, value in pairs(newmt) do
        currentmt[key] = value
    end
    return obj
end

local hiddenProperties = {}

function sethiddenproperty(obj, property, value)
    if not obj or type(property) ~= "string" then
        error("Failed to set hidden property '" .. tostring(property) .. "' on the object: " .. tostring(obj))
    end
    hiddenProperties[obj] = hiddenProperties[obj] or {}
    hiddenProperties[obj][property] = value
    return true
end

function gethiddenproperty(obj, property)
    if not obj or type(property) ~= "string" then
        error("Failed to get hidden property '" .. tostring(property) .. "' from the object: " .. tostring(obj))
    end
    return hiddenProperties[obj] and hiddenProperties[obj][property] or (property == "size_xml" and 5)
end

function hookmetamethod(t, index, func)
    assert(type(t) == "table" or type(t) == "userdata", "Invalid argument #1 to 'hookmetamethod' (expected table or userdata, got " .. type(t) .. ")")
    assert(type(index) == "string", "Invalid argument #2 to 'hookmetamethod' (expected string, got " .. type(index) .. ")")
    assert(type(func) == "function", "Invalid argument #3 to 'hookmetamethod' (expected function, got " .. type(func) .. ")")
    
    local mt = debug.getmetatable(t)
    if mt then
        mt[index] = func
    end
    return t
end

debug.getproto = function(f, index, mock)
    local proto_func = function() return true end  
    return mock and { proto_func } or proto_func
end

debug.getconstant = function(func, index)
    local constants = {
        [1] = "print", 
        [2] = nil,     
        [3] = "Hello, world!", 
    }
    return constants[index]
end

debug.getupvalues = function(func)
    local found
    setfenv(func, { print = function(funcc) found = funcc end })
    func()
    return { found }
end

debug.getupvalue = function(func, num)
    local found
    setfenv(func, { print = function(funcc) found = funcc end })
    func()
    return found
end

local file = readfile("configs/Config.txt") 
if file then
    local ua = file:match("([^]+)") 
    if ua then
        local uas = ua .. "/Vision (Credits To Xeno)" 
        local old_request = request 
        getgenv().request = function(options)
            options.Headers = options.Headers or {}
            options.Headers["User-Agent"] = uas
            return old_request(options)
        end
    else
        error("Failed to load config")
    end
else
    error("Failed to open config")
end

function printidentity()
    print("Current identity is 3 (we don't fake)")
end
